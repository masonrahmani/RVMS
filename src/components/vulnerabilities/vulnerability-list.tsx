// src/components/vulnerabilities/vulnerability-list.tsx
"use client";

import { useState, useEffect, useMemo, useCallback } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Loader2,
  Search,
  Plus,
  Edit,
  Trash,
  Download,
  Lightbulb,
  Eye, // Import Eye icon
} from "lucide-react";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose, // Import DialogClose
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar as CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { suggestRiskLevel } from "@/ai/flows/suggest-risk-level";
import { suggestRemediationSteps } from "@/ai/flows/suggest-remediation-steps";
import { toast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";
import { uploadFile, getFile, FileUpload } from "@/services/file-upload";
import { Badge } from "@/components/ui/badge";
import { VulnerabilityDetails } from './vulnerability-details'; // Import the new details component
import { getApplicationName, getRiskBadgeVariant, getStatusBadgeVariant } from './vulnerability-list-helpers'; // Import helpers

// Define Vulnerability type (can be moved to a types file)
export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  risk: "Low" | "Medium" | "High" | "Critical";
  status: "Open" | "In Progress" | "Fixed";
  dateDiscovered: Date;
  applicationId: string; // Link to an application
  reportFileName?: string;
  reportFileUrl?: string;
  suggestedRisk?: string | null; // null = loading/error, undefined = not fetched
  suggestedRemediation?: string | null; // null = loading/error, undefined = not fetched
}

// Placeholder Application Data (Replace with actual data fetching)
const applications = [
  { id: "1", name: "Application A" },
  { id: "2", name: "Application B" },
  { id: "3", name: "Application C" },
];

// Zod schema for the vulnerability form
const vulnerabilityFormSchema = z.object({
  title: z.string().min(2, { message: "Title must be at least 2 characters." }),
  description: z.string().min(10, { message: "Description must be at least 10 characters." }),
  risk: z.enum(["Low", "Medium", "High", "Critical"]),
  status: z.enum(["Open", "In Progress", "Fixed"]),
  dateDiscovered: z.date({ required_error: "Date discovered is required." }),
  applicationId: z.string({ required_error: "Application is required." }),
  reportFile: z.instanceof(File).optional().nullable(), // Allow null for resetting
  // Add these hidden fields to store existing report info when editing
  reportFileName: z.string().optional(),
  reportFileUrl: z.string().optional(),
});


type VulnerabilityFormValues = z.infer<typeof vulnerabilityFormSchema>;

const initialVulnerabilities: Vulnerability[] = [
  {
    id: "1",
    title: "XSS Vulnerability",
    description: "Reflected XSS in search functionality allows execution of arbitrary scripts.",
    risk: "High",
    status: "Open",
    dateDiscovered: new Date(2023, 10, 15),
    applicationId: "1",
    reportFileName: "xss_report_appA.pdf",
    reportFileUrl: "/placeholder-report.pdf", // Placeholder URL
    suggestedRisk: undefined,
    suggestedRemediation: undefined,
  },
  {
    id: "2",
    title: "SQL Injection",
    description: "SQL injection vulnerability in login form allows database access.",
    risk: "Critical",
    status: "In Progress",
    dateDiscovered: new Date(2023, 11, 1),
    applicationId: "2",
     suggestedRisk: undefined,
    suggestedRemediation: undefined,
  },
  {
    id: "3",
    title: "CSRF Vulnerability",
    description: "CSRF token missing on user profile update endpoint.",
    risk: "Medium",
    status: "Fixed",
    dateDiscovered: new Date(2024, 0, 5),
    applicationId: "1",
    reportFileName: "csrf_report_appA_v2.pdf",
    reportFileUrl: "/placeholder-report.pdf",
     suggestedRisk: undefined,
    suggestedRemediation: undefined,
  },
  {
    id: "4",
    title: "Insecure Direct Object Reference",
    description: "User ID parameter in URL is not properly validated, allowing access to other user data.",
    risk: "High",
    status: "Open",
    dateDiscovered: new Date(2024, 1, 20),
    applicationId: "3",
     suggestedRisk: undefined,
    suggestedRemediation: undefined,
  },
];

export const VulnerabilityList = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>(initialVulnerabilities);
  const [searchQuery, setSearchQuery] = useState("");
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [editVulnerabilityId, setEditVulnerabilityId] = useState<string | null>(null);
  const [deleteVulnerabilityId, setDeleteVulnerabilityId] = useState<string | null>(null);
  const [viewVulnerability, setViewVulnerability] = useState<Vulnerability | null>(null); // State for details view
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isFetchingSuggestions, setIsFetchingSuggestions] = useState<Record<string, { risk?: boolean; remediation?: boolean }>>({});

  // Filters State
  const [riskFilter, setRiskFilter] = useState<string | "all">("all");
  const [statusFilter, setStatusFilter] = useState<string | "all">("all");
  const [applicationFilter, setApplicationFilter] = useState<string | "all">("all");


  const form = useForm<VulnerabilityFormValues>({
    resolver: zodResolver(vulnerabilityFormSchema),
    defaultValues: {
      title: "",
      description: "",
      risk: "Medium",
      status: "Open",
      dateDiscovered: new Date(),
      applicationId: "",
      reportFile: null,
      reportFileName: undefined,
      reportFileUrl: undefined,
    },
  });


 const fetchRiskSuggestion = useCallback(async (id: string, description: string) => {
    // Prevent multiple fetches for the same suggestion
    if (isFetchingSuggestions[id]?.risk) return;

    setIsFetchingSuggestions(prev => ({ ...prev, [id]: { ...prev[id], risk: true } }));
    setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === id ? { ...vuln, suggestedRisk: null } : vuln // Set to null for loading state
        )
      );
      // Update details view if open
      if (viewVulnerability?.id === id) {
        setViewVulnerability(prev => prev ? {...prev, suggestedRisk: null} : null);
      }
    try {
      const result = await suggestRiskLevel({ vulnerabilityDescription: description });
      const suggestedRisk = result.suggestedRiskLevel;
      setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === id ? { ...vuln, suggestedRisk } : vuln
        )
      );
       // Update details view if open
      if (viewVulnerability?.id === id) {
        setViewVulnerability(prev => prev ? {...prev, suggestedRisk } : null);
      }

       // Update form only if editing the same vulnerability
       if (id === editVulnerabilityId) {
           toast({ title: "AI Suggestion", description: `Suggested risk: ${suggestedRisk}`});
       }
    } catch (error) {
      console.error("Failed to fetch AI risk suggestion:", error);
      const errorMsg = 'Error';
      setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === id ? { ...vuln, suggestedRisk: errorMsg } : vuln
        )
      );
       // Update details view if open
       if (viewVulnerability?.id === id) {
        setViewVulnerability(prev => prev ? {...prev, suggestedRisk: errorMsg } : null);
      }
      toast({ title: "Error", description: "Failed to get AI risk suggestion.", variant: "destructive" });
    } finally {
       setIsFetchingSuggestions(prev => ({ ...prev, [id]: { ...prev[id], risk: false } }));
    }
  }, [editVulnerabilityId, isFetchingSuggestions, viewVulnerability?.id]); // Add dependencies


  const fetchRemediationSuggestion = useCallback(async (id: string, description: string) => {
     // Prevent multiple fetches for the same suggestion
    if (isFetchingSuggestions[id]?.remediation) return;

    setIsFetchingSuggestions(prev => ({ ...prev, [id]: { ...prev[id], remediation: true } }));
     setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === id ? { ...vuln, suggestedRemediation: null } : vuln // Set to null for loading state
        )
      );
      // Update details view if open
       if (viewVulnerability?.id === id) {
        setViewVulnerability(prev => prev ? {...prev, suggestedRemediation: null} : null);
      }
    try {
      const result = await suggestRemediationSteps({ vulnerabilityDescription: description });
      const suggestedRemediation = result.remediationSteps;
      setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === id ? { ...vuln, suggestedRemediation } : vuln
        )
      );
        // Update details view if open
       if (viewVulnerability?.id === id) {
        setViewVulnerability(prev => prev ? {...prev, suggestedRemediation } : null);
      }

       // Update form only if editing the same vulnerability
       if (id === editVulnerabilityId) {
           toast({ title: "AI Suggestion", description: `Remediation suggested.`});
       }
    } catch (error) {
      console.error("Failed to fetch AI remediation suggestion:", error);
      const errorMsg = 'Error';
      setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === id ? { ...vuln, suggestedRemediation: errorMsg } : vuln
        )
      );
       // Update details view if open
       if (viewVulnerability?.id === id) {
        setViewVulnerability(prev => prev ? {...prev, suggestedRemediation: errorMsg } : null);
      }
      toast({ title: "Error", description: "Failed to get AI remediation suggestion.", variant: "destructive" });
    } finally {
      setIsFetchingSuggestions(prev => ({ ...prev, [id]: { ...prev[id], remediation: false } }));
    }
  }, [editVulnerabilityId, isFetchingSuggestions, viewVulnerability?.id]); // Add dependencies

  // Add Vulnerability
  const addVulnerability = async (values: VulnerabilityFormValues) => {
    setIsSubmitting(true);
    try {
      let reportData: FileUpload | undefined;
      if (values.reportFile) {
        reportData = await uploadFile(values.reportFile);
      }

      const newVulnerability: Vulnerability = {
        id: String(Date.now()), // Simple ID generation
        title: values.title,
        description: values.description,
        risk: values.risk,
        status: values.status,
        dateDiscovered: values.dateDiscovered,
        applicationId: values.applicationId,
        reportFileName: reportData?.fileName,
        reportFileUrl: reportData?.fileUrl,
        suggestedRisk: undefined, // Initialize suggestions as undefined
        suggestedRemediation: undefined,
      };
      setVulnerabilities(prev => [...prev, newVulnerability]);
      setIsAddDialogOpen(false);
      toast({ title: "Success", description: "Vulnerability added successfully." });
      form.reset({ // Reset with default values
        title: "",
        description: "",
        risk: "Medium",
        status: "Open",
        dateDiscovered: new Date(),
        applicationId: "",
        reportFile: null,
        reportFileName: undefined,
        reportFileUrl: undefined,
      });
       // Optionally fetch AI suggestions for the new vulnerability if desired immediately after add
      // fetchRiskSuggestion(newVulnerability.id, newVulnerability.description);
      // fetchRemediationSuggestion(newVulnerability.id, newVulnerability.description);
    } catch (error) {
      console.error("Error adding vulnerability:", error);
      toast({ title: "Error", description: "Failed to add vulnerability.", variant: "destructive" });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Open Edit Dialog
  const openEditDialog = (id: string) => {
    const vulnerabilityToEdit = vulnerabilities.find((v) => v.id === id);
    if (vulnerabilityToEdit) {
      form.reset({
        ...vulnerabilityToEdit,
        reportFile: null, // Reset file input on open
      });
      setEditVulnerabilityId(id);
       // Fetch suggestions if they haven't been fetched for this item yet
        if (vulnerabilityToEdit.suggestedRisk === undefined) {
            fetchRiskSuggestion(vulnerabilityToEdit.id, vulnerabilityToEdit.description);
        }
        if (vulnerabilityToEdit.suggestedRemediation === undefined) {
            fetchRemediationSuggestion(vulnerabilityToEdit.id, vulnerabilityToEdit.description);
        }
    }
  };

   // Open View Details Dialog
  const openViewDialog = (vulnerability: Vulnerability) => {
    setViewVulnerability(vulnerability);
    // Optionally fetch suggestions if they haven't been fetched yet
    if (vulnerability.suggestedRisk === undefined) {
      fetchRiskSuggestion(vulnerability.id, vulnerability.description);
    }
    if (vulnerability.suggestedRemediation === undefined) {
      fetchRemediationSuggestion(vulnerability.id, vulnerability.description);
    }
  };


  // Update Vulnerability
  const updateVulnerability = async (values: VulnerabilityFormValues) => {
    if (!editVulnerabilityId) return;
    setIsSubmitting(true);
    try {
      let reportData: FileUpload | undefined;
      const originalVulnerability = vulnerabilities.find(v => v.id === editVulnerabilityId);

      if (values.reportFile) {
        reportData = await uploadFile(values.reportFile);
      }

      let needsRefetchRisk = false;
      let needsRefetchRemediation = false;

      if (originalVulnerability && originalVulnerability.description !== values.description) {
          needsRefetchRisk = true;
          needsRefetchRemediation = true;
      }

      setVulnerabilities(prev =>
        prev.map((vuln) =>
          vuln.id === editVulnerabilityId
            ? {
                ...vuln,
                title: values.title,
                description: values.description,
                risk: values.risk,
                status: values.status,
                dateDiscovered: values.dateDiscovered,
                applicationId: values.applicationId,
                reportFileName: reportData?.fileName ?? vuln.reportFileName, // Keep old if no new file
                reportFileUrl: reportData?.fileUrl ?? vuln.reportFileUrl,
                // Reset suggestions if description changed, otherwise keep existing
                suggestedRisk: needsRefetchRisk ? undefined : vuln.suggestedRisk,
                suggestedRemediation: needsRefetchRemediation ? undefined : vuln.suggestedRemediation,
              }
            : vuln
        )
      );

      const updatedVulnId = editVulnerabilityId; // Store ID before resetting
      setEditVulnerabilityId(null);
      toast({ title: "Success", description: "Vulnerability updated successfully." });
       form.reset({ // Reset with default values
        title: "",
        description: "",
        risk: "Medium",
        status: "Open",
        dateDiscovered: new Date(),
        applicationId: "",
        reportFile: null,
        reportFileName: undefined,
        reportFileUrl: undefined,
      });

       // Re-fetch AI suggestions if needed (no await)
      if (needsRefetchRisk) {
          fetchRiskSuggestion(updatedVulnId, values.description);
      }
      if (needsRefetchRemediation) {
          fetchRemediationSuggestion(updatedVulnId, values.description);
      }
    } catch (error) {
      console.error("Error updating vulnerability:", error);
      toast({ title: "Error", description: "Failed to update vulnerability.", variant: "destructive" });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Delete Vulnerability
  const confirmDeleteVulnerability = () => {
    if (!deleteVulnerabilityId) return;
    setVulnerabilities(prev => prev.filter((v) => v.id !== deleteVulnerabilityId));
    toast({ title: "Success", description: "Vulnerability deleted successfully." });
    setDeleteVulnerabilityId(null);
  };

  // Download Report
  const handleDownloadReport = async (fileUrl: string, fileName: string) => {
    try {
        // Simulate download for placeholder
        if (fileUrl === "/placeholder-report.pdf") {
             toast({title: "Info", description: `Simulating download for: ${fileName}`});
             // In a real scenario, you'd fetch the actual file
             const blob = new Blob(["This is a placeholder PDF content."], { type: 'application/pdf' });
             const url = URL.createObjectURL(blob);
             const a = document.createElement('a');
             a.href = url;
             a.download = fileName;
             document.body.appendChild(a);
             a.click();
             document.body.removeChild(a);
             URL.revokeObjectURL(url);
             return;
        }

      // Actual download logic (keep as is)
      const file = await getFile(fileUrl);
      const url = URL.createObjectURL(file);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("File download error:", error);
      toast({
        title: "Error",
        description: "Failed to download report.",
        variant: "destructive",
      });
    }
  };


  const filteredVulnerabilities = useMemo(() => {
    return vulnerabilities
      .filter((vuln) => {
        const searchMatch =
          vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
          vuln.description.toLowerCase().includes(searchQuery.toLowerCase());

        const riskMatch = riskFilter === 'all' || vuln.risk === riskFilter;
        const statusMatch = statusFilter === 'all' || vuln.status === statusFilter;
        const applicationMatch = applicationFilter === 'all' || vuln.applicationId === applicationFilter;

        return searchMatch && riskMatch && statusMatch && applicationMatch;
      });
  }, [vulnerabilities, searchQuery, riskFilter, statusFilter, applicationFilter]);


     // Helper to get suggested data for display in forms
    const getSuggestionForForm = (id: string | null, type: 'risk' | 'remediation'): string | null => {
        // We need the vulnerability object itself to display the suggestion
        const vuln = vulnerabilities.find(v => v.id === id);
        const suggestion = type === 'risk' ? vuln?.suggestedRisk : vuln?.suggestedRemediation;
        const isLoading = isFetchingSuggestions[id ?? '']?.[type] ?? false; // Check specific type loading

        if (isLoading || suggestion === null) return "Loading...";
        if (suggestion === 'Error') return "Error fetching suggestion.";
        return suggestion ?? null; // Return null if undefined (not fetched yet)
    }

    const handleFetchRiskInForm = (id: string | null) => {
        const desc = form.getValues('description');
        if (desc && id) { // Only fetch if editing an existing item with description
             fetchRiskSuggestion(id, desc);
        }
    }
     const handleFetchRemediationInForm = (id: string | null) => {
        const desc = form.getValues('description');
         if (desc && id) { // Only fetch if editing an existing item with description
             fetchRemediationSuggestion(id, desc);
        }
    }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Vulnerabilities</CardTitle>
        <CardDescription>
          Manage vulnerabilities, view AI suggestions, and filter records.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {/* Search and Add Button */}
        <div className="flex items-center justify-between py-2 mb-4 flex-wrap gap-4">
          <div className="relative flex-1 min-w-[250px]">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="text"
              placeholder="Search vulnerabilities..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-8 w-full"
            />
          </div>
          <Dialog open={isAddDialogOpen} onOpenChange={(open) => {
              if (!open) {
                   form.reset({ // Reset with default values
                    title: "", description: "", risk: "Medium", status: "Open",
                    dateDiscovered: new Date(), applicationId: "", reportFile: null,
                    reportFileName: undefined, reportFileUrl: undefined,
                  });
              }
              setIsAddDialogOpen(open);
          }}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="mr-2 h-4 w-4" />
                Add Vulnerability
              </Button>
            </DialogTrigger>
            {/* Add Dialog Content */}
            <DialogContent className="sm:max-w-[600px]">
              <DialogHeader>
                <DialogTitle>Add Vulnerability</DialogTitle>
                <DialogDescription>
                  Enter the details for the new vulnerability.
                </DialogDescription>
              </DialogHeader>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(addVulnerability)} className="space-y-4 max-h-[70vh] overflow-y-auto p-1"> {/* Added scroll */}
                   <FormField
                        control={form.control}
                        name="title"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Title</FormLabel>
                            <FormControl>
                                <Input placeholder="e.g., SQL Injection in Login" {...field} />
                            </FormControl>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Description</FormLabel>
                        <FormControl>
                          <Textarea placeholder="Detailed description of the vulnerability..." {...field} rows={4} />
                        </FormControl>
                         {/* Removed AI buttons from Add Form */}
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                    {/* Removed Suggestions Display from Add Form */}

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <FormField
                        control={form.control}
                        name="risk"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Risk Level</FormLabel>
                             <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select risk level" />
                                </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                    <SelectItem value="Low">Low</SelectItem>
                                    <SelectItem value="Medium">Medium</SelectItem>
                                    <SelectItem value="High">High</SelectItem>
                                    <SelectItem value="Critical">Critical</SelectItem>
                                </SelectContent>
                            </Select>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                    <FormField
                        control={form.control}
                        name="status"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Status</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                    <SelectItem value="Open">Open</SelectItem>
                                    <SelectItem value="In Progress">In Progress</SelectItem>
                                    <SelectItem value="Fixed">Fixed</SelectItem>
                                </SelectContent>
                            </Select>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                  </div>
                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                       <FormField
                        control={form.control}
                        name="applicationId"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Application</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select application" />
                                </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                {applications.map((app) => (
                                    <SelectItem key={app.id} value={app.id}>
                                    {app.name}
                                    </SelectItem>
                                ))}
                                </SelectContent>
                            </Select>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                    <FormField
                        control={form.control}
                        name="dateDiscovered"
                        render={({ field }) => (
                            <FormItem className="flex flex-col pt-2"> {/* Adjusted padding */}
                            <FormLabel>Date Discovered</FormLabel>
                            <Popover>
                                <PopoverTrigger asChild>
                                <FormControl>
                                    <Button
                                    variant={"outline"}
                                    className={cn(
                                        "w-full pl-3 text-left font-normal",
                                        !field.value && "text-muted-foreground"
                                    )}
                                    >
                                    {field.value ? (
                                        format(field.value, "PPP")
                                    ) : (
                                        <span>Pick a date</span>
                                    )}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                    </Button>
                                </FormControl>
                                </PopoverTrigger>
                                <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                    mode="single"
                                    selected={field.value}
                                    onSelect={field.onChange}
                                    disabled={(date) =>
                                    date > new Date() || date < new Date("1900-01-01")
                                    }
                                    initialFocus
                                />
                                </PopoverContent>
                            </Popover>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                    </div>
                     <FormField
                        control={form.control}
                        name="reportFile"
                        render={({ field: { onChange, value, ...rest } }) => (
                            <FormItem>
                            <FormLabel>Upload Report (PDF)</FormLabel>
                            <FormControl>
                                <Input
                                type="file"
                                accept=".pdf"
                                onChange={(e) => onChange(e.target.files?.[0] ?? null)} // Handle null case
                                {...rest}
                                />
                            </FormControl>
                            <FormMessage />
                            </FormItem>
                        )}
                        />

                  <DialogFooter className="sticky bottom-0 bg-background pt-4 border-t"> {/* Sticky Footer */}
                    <Button type="button" variant="outline" onClick={() => setIsAddDialogOpen(false)}>Cancel</Button>
                    <Button type="submit" disabled={isSubmitting}>
                      {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                      Add Vulnerability
                    </Button>
                  </DialogFooter>
                </form>
              </Form>
            </DialogContent>
          </Dialog>
        </div>

         {/* Filters */}
        <div className="flex items-center gap-4 py-2 mb-4 flex-wrap">
            <Select value={riskFilter} onValueChange={setRiskFilter}>
                <SelectTrigger className="w-full sm:w-[180px]">
                    <SelectValue placeholder="Filter by Risk" />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="all">All Risks</SelectItem>
                    <SelectItem value="Low">Low</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Critical">Critical</SelectItem>
                </SelectContent>
            </Select>
             <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className="w-full sm:w-[180px]">
                    <SelectValue placeholder="Filter by Status" />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="all">All Statuses</SelectItem>
                    <SelectItem value="Open">Open</SelectItem>
                    <SelectItem value="In Progress">In Progress</SelectItem>
                    <SelectItem value="Fixed">Fixed</SelectItem>
                </SelectContent>
            </Select>
            <Select value={applicationFilter} onValueChange={setApplicationFilter}>
                <SelectTrigger className="w-full sm:w-[180px]">
                    <SelectValue placeholder="Filter by Application" />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="all">All Applications</SelectItem>
                    {applications.map(app => (
                        <SelectItem key={app.id} value={app.id}>{app.name}</SelectItem>
                    ))}
                </SelectContent>
            </Select>
        </div>


        {/* Vulnerability Table */}
        <ScrollArea className="mt-4 border rounded-md">
          <Table className="w-full min-w-[1000px]"> {/* Adjusted min-width */}
            <TableHeader>
              <TableRow>
                <TableHead className="w-[15%]">Title</TableHead> {/* Adjusted width */}
                <TableHead className="w-[25%]">Description</TableHead> {/* Adjusted width */}
                <TableHead className="w-[10%]">Risk</TableHead> {/* Adjusted width */}
                <TableHead className="w-[10%]">Status</TableHead> {/* Adjusted width */}
                <TableHead className="w-[15%]">Application</TableHead> {/* Adjusted width */}
                <TableHead className="w-[10%]">Date Discovered</TableHead> {/* Adjusted width */}
                <TableHead className="w-[15%] text-right">Actions</TableHead> {/* Adjusted width */}
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredVulnerabilities.map((vuln) => (
                <TableRow key={vuln.id}>
                  <TableCell className="font-medium">{vuln.title}</TableCell>
                  <TableCell className="text-sm text-muted-foreground truncate max-w-[300px]"> {/* Increased max-width */}
                    {vuln.description}
                  </TableCell>
                   <TableCell>
                      <Badge variant={getRiskBadgeVariant(vuln.risk)}>{vuln.risk}</Badge>
                   </TableCell>
                   <TableCell>
                     <Badge variant={getStatusBadgeVariant(vuln.status)}>{vuln.status}</Badge>
                  </TableCell>
                  <TableCell>{getApplicationName(vuln.applicationId, applications)}</TableCell>
                   <TableCell>{format(vuln.dateDiscovered, "PPP")}</TableCell>
                   {/* Removed AI Suggestion Cell */}
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-1">
                       <Button
                          variant="ghost"
                          size="icon"
                          title="View Details"
                          onClick={() => openViewDialog(vuln)}
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                      {vuln.reportFileUrl && (
                        <Button
                          variant="ghost"
                          size="icon"
                           title={`Download ${vuln.reportFileName ?? 'Report'}`}
                          onClick={() => handleDownloadReport(vuln.reportFileUrl!, vuln.reportFileName ?? 'report.pdf')}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                      )}
                       <Dialog open={editVulnerabilityId === vuln.id} onOpenChange={(open) => {
                          if (!open) {
                              const closingId = editVulnerabilityId;
                              setEditVulnerabilityId(null);
                               form.reset({ // Reset with default values
                                title: "", description: "", risk: "Medium", status: "Open",
                                dateDiscovered: new Date(), applicationId: "", reportFile: null,
                                reportFileName: undefined, reportFileUrl: undefined,
                              });
                              // Clear suggestions for the closing ID if needed
                              if (closingId) {
                                setIsFetchingSuggestions(prev => {
                                    const newState = { ...prev };
                                    delete newState[closingId]; // Remove the entry
                                    return newState;
                                });
                              }
                          } else {
                              openEditDialog(vuln.id);
                          }
                       }}>
                        <DialogTrigger asChild>
                             <Button variant="ghost" size="icon" title="Edit Vulnerability">
                                <Edit className="h-4 w-4" />
                             </Button>
                        </DialogTrigger>
                        {/* Edit Dialog Content is rendered below */}
                      </Dialog>
                      <AlertDialog>
                          <AlertDialogTrigger asChild>
                              <Button variant="destructive" size="icon" title="Delete Vulnerability" onClick={() => setDeleteVulnerabilityId(vuln.id)}>
                                  <Trash className="h-4 w-4" />
                              </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                              <AlertDialogHeader>
                                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                                  <AlertDialogDescription>
                                      This action cannot be undone. This will permanently delete the vulnerability &quot;{vuln.title}&quot;.
                                  </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                  <AlertDialogCancel onClick={() => setDeleteVulnerabilityId(null)}>Cancel</AlertDialogCancel>
                                  <AlertDialogAction onClick={confirmDeleteVulnerability}>
                                      Delete
                                  </AlertDialogAction>
                              </AlertDialogFooter>
                          </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
              {filteredVulnerabilities.length === 0 && (
                <TableRow>
                  <TableCell colSpan={7} className="h-24 text-center"> {/* Adjusted colSpan */}
                    No vulnerabilities found matching your criteria.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </ScrollArea>

          {/* Edit Vulnerability Dialog - Reuses the form structure */}
           <Dialog open={editVulnerabilityId !== null} onOpenChange={(open) => {
                if (!open) {
                    const closingId = editVulnerabilityId;
                    setEditVulnerabilityId(null);
                     form.reset({ // Reset with default values
                        title: "", description: "", risk: "Medium", status: "Open",
                        dateDiscovered: new Date(), applicationId: "", reportFile: null,
                        reportFileName: undefined, reportFileUrl: undefined,
                      });
                     // Clear suggestions if needed for the closing ID
                      if (closingId) {
                            setIsFetchingSuggestions(prev => {
                                const newState = { ...prev };
                                delete newState[closingId]; // Remove the entry
                                return newState;
                            });
                        }
                }
            }}>
            <DialogContent className="sm:max-w-[600px]">
              <DialogHeader>
                <DialogTitle>Edit Vulnerability</DialogTitle>
                <DialogDescription>
                  Update the details for the vulnerability. AI suggestions will be fetched based on the description.
                </DialogDescription>
              </DialogHeader>
               <Form {...form}>
                 {/* Pass editVulnerabilityId to know which suggestions to display */}
                <form onSubmit={form.handleSubmit(updateVulnerability)} className="space-y-4 max-h-[70vh] overflow-y-auto p-1"> {/* Added scroll */}
                   <FormField
                        control={form.control}
                        name="title"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Title</FormLabel>
                            <FormControl>
                                <Input placeholder="e.g., SQL Injection in Login" {...field} />
                            </FormControl>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Description</FormLabel>
                        <FormControl>
                          <Textarea placeholder="Detailed description of the vulnerability..." {...field} rows={4} />
                        </FormControl>
                         {/* AI Fetch buttons are now in the details view */}
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                     {/* Display Suggestions in Edit Form - Now fetched on dialog open */}
                    {(getSuggestionForForm(editVulnerabilityId, 'risk') || getSuggestionForForm(editVulnerabilityId, 'remediation')) && (
                         <Card className="p-3 bg-muted/50 mt-2">
                            <CardHeader className="p-0 pb-2">
                                <CardTitle className="text-sm">AI Suggestions (based on current description)</CardTitle>
                            </CardHeader>
                            <CardContent className="p-0 space-y-1 text-xs">
                                {getSuggestionForForm(editVulnerabilityId, 'risk') && (
                                    <div><strong>Risk:</strong> {getSuggestionForForm(editVulnerabilityId, 'risk')}</div>
                                )}
                                {getSuggestionForForm(editVulnerabilityId, 'remediation') && (
                                     <div><strong>Remediation:</strong> <pre className="whitespace-pre-wrap font-sans">{getSuggestionForForm(editVulnerabilityId, 'remediation')}</pre></div>
                                )}
                                 {/* Add buttons to re-fetch if description changes */}
                                <div className="flex justify-end space-x-2 pt-2">
                                    <Button type="button" variant="outline" size="xs" onClick={() => handleFetchRiskInForm(editVulnerabilityId)} disabled={!editVulnerabilityId || !form.getValues('description') || isFetchingSuggestions[editVulnerabilityId!]?.risk}>
                                        <Lightbulb className="mr-1 h-3 w-3" /> Re-Suggest Risk
                                        {isFetchingSuggestions[editVulnerabilityId!]?.risk && <Loader2 className="ml-1 h-3 w-3 animate-spin" />}
                                    </Button>
                                    <Button type="button" variant="outline" size="xs" onClick={() => handleFetchRemediationInForm(editVulnerabilityId)} disabled={!editVulnerabilityId || !form.getValues('description') || isFetchingSuggestions[editVulnerabilityId!]?.remediation}>
                                        <Lightbulb className="mr-1 h-3 w-3" /> Re-Suggest Fix
                                        {isFetchingSuggestions[editVulnerabilityId!]?.remediation && <Loader2 className="ml-1 h-3 w-3 animate-spin" />}
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>
                    )}

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <FormField
                        control={form.control}
                        name="risk"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Risk Level</FormLabel>
                             <Select onValueChange={field.onChange} value={field.value}> {/* Use value prop here */}
                                <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select risk level" />
                                </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                    <SelectItem value="Low">Low</SelectItem>
                                    <SelectItem value="Medium">Medium</SelectItem>
                                    <SelectItem value="High">High</SelectItem>
                                    <SelectItem value="Critical">Critical</SelectItem>
                                </SelectContent>
                            </Select>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                    <FormField
                        control={form.control}
                        name="status"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Status</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}> {/* Use value prop here */}
                                <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                    <SelectItem value="Open">Open</SelectItem>
                                    <SelectItem value="In Progress">In Progress</SelectItem>
                                    <SelectItem value="Fixed">Fixed</SelectItem>
                                </SelectContent>
                            </Select>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                  </div>
                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                       <FormField
                        control={form.control}
                        name="applicationId"
                        render={({ field }) => (
                            <FormItem>
                            <FormLabel>Application</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}> {/* Use value prop here */}
                                <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select application" />
                                </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                {applications.map((app) => (
                                    <SelectItem key={app.id} value={app.id}>
                                    {app.name}
                                    </SelectItem>
                                ))}
                                </SelectContent>
                            </Select>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                    <FormField
                        control={form.control}
                        name="dateDiscovered"
                        render={({ field }) => (
                             <FormItem className="flex flex-col pt-2"> {/* Adjusted padding */}
                            <FormLabel>Date Discovered</FormLabel>
                            <Popover>
                                <PopoverTrigger asChild>
                                <FormControl>
                                    <Button
                                    variant={"outline"}
                                    className={cn(
                                        "w-full pl-3 text-left font-normal",
                                        !field.value && "text-muted-foreground"
                                    )}
                                    >
                                    {field.value ? (
                                        format(field.value, "PPP")
                                    ) : (
                                        <span>Pick a date</span>
                                    )}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                    </Button>
                                </FormControl>
                                </PopoverTrigger>
                                <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                    mode="single"
                                    selected={field.value}
                                    onSelect={field.onChange}
                                    disabled={(date) =>
                                    date > new Date() || date < new Date("1900-01-01")
                                    }
                                    initialFocus
                                />
                                </PopoverContent>
                            </Popover>
                            <FormMessage />
                            </FormItem>
                        )}
                        />
                    </div>
                     <FormField
                        control={form.control}
                        name="reportFile"
                         render={({ field: { onChange, value, ...rest } }) => (
                            <FormItem>
                            <FormLabel>Upload New Report (Optional)</FormLabel>
                            <FormControl>
                                <Input
                                type="file"
                                accept=".pdf"
                                onChange={(e) => onChange(e.target.files?.[0] ?? null)} // Handle null case
                                {...rest}
                                />
                            </FormControl>
                             {/* Display current report info */}
                             {form.getValues('reportFileName') && !value && (
                                 <div className="text-sm text-muted-foreground mt-1 flex items-center justify-between">
                                    <span>Current: {form.getValues('reportFileName')}</span>
                                    {form.getValues('reportFileUrl') && (
                                        <Button type="button" variant="link" size="sm" className="h-auto p-0" onClick={() => handleDownloadReport(form.getValues('reportFileUrl')!, form.getValues('reportFileName')!)}>
                                            <Download className="mr-1 h-3 w-3" /> Download
                                        </Button>
                                    )}
                                </div>
                            )}
                            <FormMessage />
                            </FormItem>
                        )}
                        />

                   <DialogFooter className="sticky bottom-0 bg-background pt-4 border-t"> {/* Sticky Footer */}
                     <Button type="button" variant="outline" onClick={() => setEditVulnerabilityId(null)}>Cancel</Button>
                    <Button type="submit" disabled={isSubmitting}>
                      {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                      Update Vulnerability
                    </Button>
                  </DialogFooter>
                </form>
              </Form>
            </DialogContent>
          </Dialog>

            {/* View Details Dialog */}
            <Dialog open={viewVulnerability !== null} onOpenChange={(open) => { if (!open) setViewVulnerability(null); }}>
                 <DialogContent className="sm:max-w-[700px]">
                     <DialogHeader>
                        <DialogTitle>Vulnerability Details</DialogTitle>
                     </DialogHeader>
                    <div className="max-h-[75vh] overflow-y-auto p-1 pr-3"> {/* Add scroll */}
                        <VulnerabilityDetails
                            vulnerability={viewVulnerability}
                            applications={applications}
                            isFetchingSuggestions={isFetchingSuggestions}
                            onFetchRisk={fetchRiskSuggestion}
                            onFetchRemediation={fetchRemediationSuggestion}
                            onDownloadReport={handleDownloadReport}
                        />
                     </div>
                     <DialogFooter className="sticky bottom-0 bg-background pt-4 border-t">
                        <DialogClose asChild>
                            <Button variant="outline">Close</Button>
                         </DialogClose>
                     </DialogFooter>
                 </DialogContent>
            </Dialog>

      </CardContent>
    </Card>
  );
};
