"use client";

import { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Search } from "lucide-react";
import { suggestRiskLevel, SuggestRiskLevelInput, SuggestRiskLevelOutput } from "@/ai/flows/suggest-risk-level";
import { suggestRemediationSteps, SuggestRemediationStepsInput, SuggestRemediationStepsOutput } from "@/ai/flows/suggest-remediation-steps";

const placeholderVulnerabilities = [
  { id: "1", title: "XSS Vulnerability", risk: "High", description: "A cross-site scripting vulnerability." },
  { id: "2", title: "SQL Injection", risk: "Critical", description: "A SQL injection vulnerability." },
  { id: "3", title: "CSRF Vulnerability", risk: "Medium", description: "A cross-site request forgery vulnerability." },
];

export const VulnerabilityList = () => {
  const [vulnerabilities, setVulnerabilities] = useState(placeholderVulnerabilities);
  const [searchQuery, setSearchQuery] = useState("");

  const filteredVulnerabilities = vulnerabilities.filter((vuln) =>
    vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    vuln.description.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // AI Suggestion functions
  const getRiskLevelSuggestion = async (description: string) => {
    const input: SuggestRiskLevelInput = { vulnerabilityDescription: description };
    try {
      const result: SuggestRiskLevelOutput = await suggestRiskLevel(input);
      return result.suggestedRiskLevel;
    } catch (error) {
      console.error("Failed to get risk level suggestion:", error);
      return "Medium"; // Default risk level
    }
  };

    const getRemediationStepsSuggestion = async (description: string) => {
    const input: SuggestRemediationStepsInput = { vulnerabilityDescription: description };
    try {
      const result: SuggestRemediationStepsOutput = await suggestRemediationSteps(input);
      return result.remediationSteps;
    } catch (error) {
      console.error("Failed to get remediation steps suggestion:", error);
      return "TBD"; // Default remediation steps
    }
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Vulnerabilities</CardTitle>
        <CardDescription>List of vulnerabilities with AI-suggested risk levels and remediation steps.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex items-center justify-between py-2">
          <Input
            type="text"
            placeholder="Search vulnerabilities..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="max-w-sm"
          />
        </div>
        <ScrollArea>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Title</TableHead>
                <TableHead>Description</TableHead>
                <TableHead>Risk</TableHead>
                <TableHead>Remediation Steps</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredVulnerabilities.map((vuln) => (
                <TableRow key={vuln.id}>
                  <TableCell>{vuln.title}</TableCell>
                  <TableCell>{vuln.description}</TableCell>
                  <TableCell>
                    {vuln.risk}
                  </TableCell>
                   <TableCell>
                    {getRemediationStepsSuggestion(vuln.description)}
                  </TableCell>
                </TableRow>
              ))}
              {filteredVulnerabilities.length === 0 && (
                <TableRow>
                  <TableCell colSpan={4} className="text-center">
                    No vulnerabilities found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};
