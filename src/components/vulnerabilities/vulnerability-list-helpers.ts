// src/components/vulnerabilities/vulnerability-list-helpers.ts
import type { BadgeProps } from "@/components/ui/badge"; // Import BadgeProps type
import type { Vulnerability } from './vulnerability-list';

/**
 * Determines the appropriate badge variant based on the vulnerability risk level.
 * @param risk - The risk level ('Low', 'Medium', 'High', 'Critical').
 * @returns The corresponding Badge variant ('default', 'secondary', 'destructive', 'outline').
 */
export const getRiskBadgeVariant = (risk: Vulnerability["risk"]): NonNullable<BadgeProps["variant"]> => {
    switch (risk) {
      case 'Critical': return 'destructive';
      case 'High': return 'destructive'; // Using destructive (red) for High as well
      case 'Medium': return 'secondary'; // Using secondary (orange/yellowish)
      case 'Low': return 'outline'; // Using outline (yellowish border)
      default: return 'default'; // Default (greenish) as fallback
    }
};

/**
 * Determines the appropriate badge variant based on the vulnerability status.
 * @param status - The status ('Open', 'In Progress', 'Fixed').
 * @returns The corresponding Badge variant ('default', 'secondary', 'destructive').
 */
export const getStatusBadgeVariant = (status: Vulnerability["status"]): NonNullable<BadgeProps["variant"]> => {
     switch (status) {
       case 'Fixed': return 'default'; // Using default (greenish)
       case 'In Progress': return 'secondary'; // Using secondary (orange/yellow)
       case 'Open': return 'destructive'; // Using destructive (red)
       default: return 'default';
     }
};

/**
 * Finds the name of an application based on its ID.
 * @param appId - The ID of the application.
 * @param applications - An array of application objects ({ id: string, name: string }).
 * @returns The name of the application or 'Unknown App' if not found.
 */
export const getApplicationName = (appId: string, applications: { id: string; name: string }[]): string => {
     return applications.find(app => app.id === appId)?.name ?? 'Unknown App';
};
