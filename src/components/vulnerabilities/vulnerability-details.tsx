// src/components/vulnerabilities/vulnerability-details.tsx
"use client";

import type { Vulnerability } from './vulnerability-list'; // Assuming type is exported
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { format } from "date-fns";
import { Lightbulb, Loader2, Download } from "lucide-react";
import { getApplicationName, getRiskBadgeVariant, getStatusBadgeVariant } from './vulnerability-list-helpers'; // Import helpers

interface VulnerabilityDetailsProps {
  vulnerability: Vulnerability | null;
  applications: { id: string; name: string }[]; // Pass applications for name lookup
  isFetchingSuggestions: Record<string, { risk?: boolean; remediation?: boolean }>;
  onFetchRisk: (id: string, description: string) => void;
  onFetchRemediation: (id: string, description: string) => void;
  onDownloadReport: (fileUrl: string, fileName: string) => void;
}

export const VulnerabilityDetails = ({
  vulnerability,
  applications,
  isFetchingSuggestions,
  onFetchRisk,
  onFetchRemediation,
  onDownloadReport,
}: VulnerabilityDetailsProps) => {
  if (!vulnerability) return null;

  const isLoadingRisk = isFetchingSuggestions[vulnerability.id]?.risk ?? false;
  const isLoadingRemediation = isFetchingSuggestions[vulnerability.id]?.remediation ?? false;

  const renderSuggestion = (suggestion: string | null | undefined, isLoading: boolean, errorText: string = "Error fetching suggestion.") => {
    if (isLoading) {
      return <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />;
    }
    if (suggestion === 'Error') {
      return <span className="text-destructive text-xs">{errorText}</span>;
    }
    if (suggestion) {
       // Use pre-wrap for remediation steps to preserve formatting
      return <pre className="text-xs whitespace-pre-wrap font-sans bg-muted p-2 rounded-md">{suggestion}</pre>;
    }
    return <span className="text-muted-foreground text-xs italic">No suggestion available.</span>;
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>{vulnerability.title}</CardTitle>
          <CardDescription>
            Discovered on: {format(vulnerability.dateDiscovered, "PPP")}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <h4 className="font-semibold text-sm mb-1">Description</h4>
            <p className="text-sm text-muted-foreground">{vulnerability.description}</p>
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <h4 className="font-semibold text-sm mb-1">Risk Level</h4>
              <Badge variant={getRiskBadgeVariant(vulnerability.risk)}>{vulnerability.risk}</Badge>
            </div>
            <div>
              <h4 className="font-semibold text-sm mb-1">Status</h4>
              <Badge variant={getStatusBadgeVariant(vulnerability.status)}>{vulnerability.status}</Badge>
            </div>
            <div>
               <h4 className="font-semibold text-sm mb-1">Application</h4>
               <span className="text-sm text-muted-foreground">{getApplicationName(vulnerability.applicationId, applications)}</span>
            </div>
             <div>
              <h4 className="font-semibold text-sm mb-1">Report</h4>
              {vulnerability.reportFileUrl && vulnerability.reportFileName ? (
                <Button
                  variant="link"
                  size="sm"
                  className="p-0 h-auto"
                  onClick={() => onDownloadReport(vulnerability.reportFileUrl!, vulnerability.reportFileName!)}
                >
                  <Download className="mr-1 h-3 w-3" /> {vulnerability.reportFileName}
                </Button>
              ) : (
                <span className="text-sm text-muted-foreground italic">No report uploaded</span>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg">AI Suggestions</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-semibold text-sm">Suggested Risk Level</h4>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onFetchRisk(vulnerability.id, vulnerability.description)}
                disabled={isLoadingRisk}
              >
                <Lightbulb className="mr-1 h-3 w-3" />
                {isLoadingRisk ? <Loader2 className="h-3 w-3 animate-spin" /> : "Get Suggestion"}
              </Button>
            </div>
            {renderSuggestion(vulnerability.suggestedRisk, isLoadingRisk)}
          </div>
          <div>
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-semibold text-sm">Suggested Remediation Steps</h4>
               <Button
                variant="outline"
                size="sm"
                onClick={() => onFetchRemediation(vulnerability.id, vulnerability.description)}
                disabled={isLoadingRemediation}
              >
                <Lightbulb className="mr-1 h-3 w-3" />
                 {isLoadingRemediation ? <Loader2 className="h-3 w-3 animate-spin" /> : "Get Suggestion"}
              </Button>
            </div>
             {renderSuggestion(vulnerability.suggestedRemediation, isLoadingRemediation)}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
